import win.ui;
/*DSG{{*/
var winform = win.form(text="aardio form";right=0;bottom=0)
winform.add()
/*}}*/

import process; 
import fsys.stream;
import gdip.bitmap;
import inet.http;
import web.view;
var theView  = web.view(winform); 
//导出为 JavaScript 中的 aardio 对象
theView.external = {
    openFile = function(url,modes){
        file = io.open (url, modes);
        io.print("打开文件：",url,"类型：",modes,"结果：",file);
    }
    closeFile = function(){
        file.close();
        io.print("关闭文件");
    }
    readFile = function(url){
        var s = file.read(url);
        io.print("读取文件：",url,"打开内容：",s);
        return s;
    }
    writeFile = function(url){
        file.write(url);
        io.print("写入文件内容：",url);
        return s;
    }
    getFile = function(url){
        var $str = string.load(url)
        io.print("读取文件：",url,"打开内容：",$str);
        return $str;
    }
    saveFile = function(url,content,append){
        var $str = string.save(url,content,append)
        io.print("复写文件：",url,"内容：",content);
        return $str;
    }
    deleteFile = function(url){
        var $str = fsys.delete(url);
        io.print("删除文件：",url);
        return $str;
    }
    createDir = function(url){
        fsys.createDir(url);
        io.print("创建文件夹：",url);
    }
    hitClose = function(){
        winform.msgbox("导入完成",Info.name,0)
        winform.hitClose();
    }
    get = function(url){
        io.print(url)
        //获取一个网络图片
		var pngData = inet.http().get(url);

		//转换为GDI对象处理
		var bitmap = gdip.bitmap( pngData );

		//转换为文件流
		var stream = fsys.stream();
		bitmap.saveToStream(stream,"*.png");

		//获取图片字符串 保存到本地
		var str  = stream.readAll();
		fsys.createDir("C:/CCW Launcher/");
		string.save("C:/CCW Launcher/" + Info.name + ".png",str );
    }
}
var script = `/**
 * 打开文件
 * @param {string} url 打开文件的路径
 * @param {string} mode "r+": 打开读写文件;"w+": 打开创建覆写读写文件;"a+": 打开创建读写追加文件
 */
function openFile(url, mode) {
    aardio.openFile(url, mode);
}
/**
 * 读取文件
 * @param {any} url 读取的内容下标：https://bbs.aardio.com/doc/reference/libraries/kernel/io/io.html
 * @returns 读取的文件结果
 */
async function readFile(url) {
    return await aardio.readFile(url);
}
/**
 * 写入到已打开的文件
 * @param {string} content 写入的内容
 */
function writeFile(content) {
    aardio.writeFile(content);
}
/**
 * 获取文件内容
 * @param {string} url 要读取文件的路径
 * @returns 读取的结果
 */
async function getFile(url) {
    return await aardio.getFile(url);
}
/**
 * 关闭已打开的文件
 */
function closeFile() {
    aardio.closeFile();
}
/**
 *  写入文件到指定路径
 * @param {string} url 文件路径
 * @param {string} content 复写内容
 * @param {boolean} append true:追加,false:复写
 */
function saveFile(url, content, append = false) {
    aardio.saveFile(url, content, append);
}
/**
 * 删除文件
 * @param {string} url 文件路径
 */
function deleteFile(url) {
    aardio.deleteFile(url);
}
/**
 * 创建文件夹
 * @param {string} url 需要创建的路径
 */
function createDir(url) {
    aardio.createDir(url);
}
//以上为aardio接口翻译

/**
 * 写入内容到储存内容（自动创建）
 * @param {string} name 文件名
 * @param {string} content 内容
 * @param {boolean} append true:追加;false:复写
 */
function setFile(name, content, append = false) {
    getFile('C:/CCW Launcher/' + name).then(function (res) {
        console.log(res)
        if (res === null) {
            createDir('C:/CCW Launcher');
            openFile('C:/CCW Launcher/' + name, 'w+');
            closeFile();
        }
        saveFile('C:/CCW Launcher/' + name, content, append);
    })
}

let Interval = setInterval(() => {
    if (document.getElementsByClassName("runWorksOuterBtn-mHIzf btn-iEdNA btn-middle-19T-1 btn-primary-QAIa5")[0] !== undefined) {
        aardio.get(document.getElementsByClassName("runWorksWrapper-3T6tc")[0].style.backgroundImage.split('"')[1].split('?')[0]);
        getFile('C:/CCW Launcher/save.json').then((e) => {
            let url = "` + Info.url + `"
            try {
                let json = JSON.parse(e);
                json.push({ "name": "` + Info.name + `", "url": url.split("detail").join("player") })
                setFile("save.json", JSON.stringify(json))
            }
            catch (e) {
                let json = [];
                json.push({ "name": "` + Info.name + `", "url": url.split("detail").join("player") })
                setFile("save.json", JSON.stringify(json))
            }
            clearInterval(Interval);
            setTimeout(() => {
                aardio.hitClose();
            }, 1000);
        })
    }
}, 1000);`
class MINMAXINFO
{
        LONG reserved;
        int maxSizeX;
        int maxSizeY;
        int maxPositionX;
        int maxPositionY;
        int minTrackSizeX;
        int minTrackSizeY;
        int maxTrackSizeX;
        int maxTrackSizeY;
}
winform.wndproc = function ( hwnd, message, wParam, lParam ) {
        select(message) {
                case 0x24/*_WM_GETMINMAXINFO*/ {
                        var m = MINMAXINFO()
                        raw.convert(topointer(lParam), m);
                        m.minTrackSizeX = 1
                        m.minTrackSizeY = 1
                        m.maxTrackSizeX = 1
                        m.maxTrackSizeY = 1
                        ::CopyMemoryByStruct(topointer(lParam), m, raw.sizeof(m));
                        return 0
                }
        }
}
theView.go(Info.url);
theView.doScript(script)
io.print(url)
winform.show();
win.loopMessage();
return winform;
